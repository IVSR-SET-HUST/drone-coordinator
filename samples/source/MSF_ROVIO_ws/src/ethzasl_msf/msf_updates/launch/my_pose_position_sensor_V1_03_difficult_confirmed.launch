<!-- this is a sample launch file to run MSF with rovio and position Input from Vicon-->
<launch>
	<!-- this is the main MSF node. The name is used to access this node (from other nodes/utilities)-->
    <node  name="msf_position_pose_sensor" pkg="msf_updates" type="position_pose_sensor" clear_params="true" output="screen">
		<!-- this is used to remap output from one topic to input of another. usage: remap from="input_name" to="output_name"-->
        <remap from="msf_core/imu_state_input" to="/fcu/imu" />
        <!--this is how to select a parameters file-->
        <rosparam file="$(find msf_updates)/VH_data/msf_sensor_fix.yaml"/>
        <remap from="msf_updates/position_input" to="/noise_drift_handler/position_output" />
        <remap from="msf_updates/pose_with_covariance_input" to="noise_drift_handler/pose_output" />
        <param name="capability_group" value="MSF" />
    </node>    

	<!-- this is the Rovio node. Parameters and options are similar to MSF. It is required to run MSF with pose from camera-->
    <node name="rovio" pkg="rovio" type="rovio_node" output="screen">
        <param name="filter_config" value="$(find rovio)/cfg/rovio.info"/>
        <param name="camera0_config" value="$(find rovio)/cfg/euroc_cam0.yaml"/>
        <param name="camera1_config" value="$(find rovio)/cfg/euroc_cam1.yaml"/>
    	<remap from="cam0/image_raw" to="cam0/image_raw"/>
		<remap from="cam1/image_raw" to="cam1/image_raw"/>
    	<remap from="imu0" to="rovio_divergence_handler/imu0_output"/>
    </node>
    
    <!--all in- and outputs for the additional codes can be found on the wiki-->
    <!--this is an optional node to compute the error of the MSF estimate (datainput) to the Groundtruth (truthinput) online-->
    <node name="pos_to_error" pkg="msf_updates" type="pos_to_error.py" output="screen">
        <remap from="pos_to_error/datainput" to="msf_core/state_out"/>
        <remap from="pos_to_error/truthinput" to="/vicon/firefly_sbx/firefly_sbx"/>
        <rosparam file="$(find msf_updates)/VH_data/pos_to_error_fix.yaml"/>
    </node>

	<!--this is an optional node that can be used for testing. It introduces noise and outliers to the measurements-->
    <node name="noise_drift_handler" pkg="msf_updates" type="noise_drift_handler.py" output="screen">
        <remap from="noise_drift_handler/pose_input" to="/rovio/pose_with_covariance_stamped"/>
        <remap from="noise_drift_handler/transform_input" to="/vicon/firefly_sbx/firefly_sbx"/>
        <rosparam file="$(find msf_updates)/VH_data/noise_drift_handler_fix.yaml"/>
    </node>
    
    <!-- thi is an optional node that can be used for testing. It makes rovio diverge by corrupting the IMU measurements-->
    <node name="rovio_divergence_handler" pkg="msf_updates" type="rovio_divergence_handler.py" output="screen">
        <remap from="rovio_divergence_handler/cam0_input" to="/cam0/image_raw"/>
        <remap from="rovio_divergence_handler/cam1_input" to="/cam1/image_raw"/>
        <remap from="rovio_divergence_handler/imu0_input" to="/imu0"/>
        <rosparam file="$(find msf_updates)/VH_data/rovio_divergence_handler_fix.yaml"/>
    </node>
</launch>
